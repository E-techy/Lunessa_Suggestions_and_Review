generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// Admin model for managing reviews
model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique                          // üîë unique username
  apiKey   String
  email    String @unique
  phoneNumber String @unique
  role     String                                  // e.g. "admin", "moderator"

  // ‚ö†Ô∏è Removed @@index([username]) since @unique already indexes it
}

/// ---------------- REVIEWS ----------------

/// Global statistics (only a single object stored here)
model ReviewStats {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  averageRating  Float
  totalReviews   Int
  positivityLevel Float   // value 0 - 100
}




/// Individual Review documents
model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewID      String   @unique                        // üîë unique review identifier
  name          String
  username      String
  createdAt     DateTime @default(now())                // üìå review creation timestamp
  lastModified  DateTime @updatedAt                     // üìå auto-updates on edit
  comment       String
  ratingStar    Int
  files         File[]  
  reviewType    String
  positivityLevel  Float

  @@index([createdAt], map: "idx_review_createdAt")     // fast recent reviews
  @@index([username], map: "idx_review_username")       // fast search by username
  // ‚ö†Ô∏è Removed @@index([reviewID]) since reviewID is already @unique
}

/// File structure (reusable for reviews/suggestions)
type File {
  fileName String
  fileType String // e.g. "photo", "pdf", "txt", "doc"
  fileData Bytes   // stores the actual file binary data
  fileSize Int     // size in KB or Bytes
  fileExtension  String // file extension
}

/// ---------------- TOP REVIEWS ----------------

model TopReview {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reviewID   String   @unique                         // üîë reference to Review.reviewID
  createdAt  DateTime                                // copied from Review.createdAt
  ratingStar Int                                     // store for ranking
  name       String                                  // reviewer name (required)
  comment    String                                  // review text (required)

  @@index([createdAt], map: "idx_topreview_createdAt") // fast recent queries
}



/// ---------------- SUGGESTIONS ----------------

/// Main Suggestion model
model Suggestion {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  suggestionId          String   @unique                         // üîë unique suggestion identifier
  username              String
  name                  String
  createdAt             DateTime @default(now())
  lastModified          DateTime @updatedAt
  suggestionCategory    String
  suggestionDescription String
  files                 File[]  
  suggestionStatus      String   // e.g. "live", "completed", "pending"
  accepted              Boolean  @default(false)
  acceptedAt            DateTime?

  // ‚ö†Ô∏è Removed @@index([suggestionId]) since it's already @unique
  @@index([username], map: "idx_suggestion_username")           // üî• fast search by username
  @@index([createdAt], map: "idx_suggestion_createdAt")         // üî• fast recent suggestions
  @@index([suggestionCategory], map: "idx_suggestion_category") // üî• fast search by category
}

/// Tracker for live suggestions
model LiveSuggestion {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  suggestionId   String   @unique                        // üîë unique suggestion identifier
  createdAt      DateTime @default(now())
  acceptedAt     DateTime?

  @@index([createdAt], map: "idx_live_createdAt")           // fast recent/older queries
  // ‚ö†Ô∏è Removed @@index([suggestionId]) since it's already @unique
}

/// Tracker for completed suggestions
model CompletedSuggestion {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  suggestionId   String   @unique                        // üîë unique suggestion identifier
  createdAt      DateTime @default(now())
  acceptedAt     DateTime?
  resolutionDate DateTime?

  @@index([createdAt], map: "idx_completed_createdAt")           // fast recent/older queries
  @@index([resolutionDate], map: "idx_completed_resolutionDate") // fast search by resolution date
  // ‚ö†Ô∏è Removed @@index([suggestionId]) since it's already @unique
}
